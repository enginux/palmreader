#!/usr/bin/env node

'use strict';

Buffer.poolSize = 0;
process.title = 'palmreader';

const os = require('os');
const path = require('path');
const blessed = require('blessed');
const {addInputH, addButton} = require('../lib/util');

const screen = blessed.screen();

// MAIN
const form = blessed.form({
  parent: screen,
  interactive: true,
  keys: true,
  mouse: true,
  border: {
    type: 'line',
    fg: 'red'
  }
});

blessed.text({
    parent: form,
    content:
      'Palm Reader Setup Wizard\n' +
      ' press ctrl-C to (Q)uit',
    top: 0,
    left: 'center',
    width: 40,
    bold: true
  });

// OPTIONS
// Network
const network = blessed.radioset({
  parent: form,
  left: 2,
  top: 2,
  shrink: true,
  content: 'Network:',
  style: {bold: true}
});
  const mainNet = blessed.radiobutton({
    parent: network,
    mouse: true,
    keys: true,
    shrink: true,
    height: 1,
    left: 0,
    top: 2,
    name: 'main',
    content: '(M)ain',
    checked: true
  });
  const regNet = blessed.radiobutton({
    parent: network,
    mouse: true,
    keys: true,
    shrink: true,
    height: 1,
    left: 0,
    top: 3,
    name: 'regtest',
    content: '(R)egtest'
  });

// Prefix
const home = path.join(os.homedir(), '.hsd');
let bob =  os.homedir();
switch (os.type()) {
  case 'Darwin':
    bob = path.join(bob, 'Library', 'Application Support', 'Bob', 'hsd_data');
    break;
  case 'Linux':
    bob = path.join(bob, '.config', 'Bob', 'hsd_data');
    break;
  case 'Windows_NT':
    bob = path.join(bob, 'Bob', 'hsd_data');
    break;
  default:
    throw new Error('Unrecognized OS');
}
const prefix = blessed.radioset({
  parent: form,
  left: 2,
  top: 8,
  shrink: true,
  content: 'Data Directory:',
  style: {bold: true}
});
  const homeDir = blessed.radiobutton({
    parent: prefix,
    mouse: true,
    keys: true,
    shrink: true,
    height: 1,
    left: 0,
    top: 2,
    name: 'homeDir',
    content: '(D)efault: ' + home,
    checked: true
  });
  const bobDir = blessed.radiobutton({
    parent: prefix,
    mouse: true,
    keys: true,
    shrink: true,
    height: 1,
    left: 0,
    top: 3,
    name: 'bobDir',
    content: '(B)ob:     ' + bob
  });

// START BUTTONS
addButton(
  form,
  'START (F)ULL NODE',
  {
    bottom: 10,
    right: 10
  }
).on('press', async () => {
  return start(true);
});

addButton(
  form,
  'START (S)PV NODE',
  {
    bottom: 10,
    left: 10
  }
).on('press', async () => {
  return start(false);
});

screen.render();

// KEYS
screen.key(['Q', 'q', 'C-c'], async () => {
  return process.exit(0);
});
screen.key(['F', 'f'], async () => {
  return start(true);
});
screen.key(['S', 's'], async () => {
  return start(false);
});
screen.key(['R', 'r'], async () => {
  regNet.check();
  screen.render();
});
screen.key(['M', 'm'], async () => {
  mainNet.check();
  screen.render();
});
screen.key(['D', 'd'], async () => {
  homeDir.check();
  screen.render();
});
screen.key(['B', 'b'], async () => {
  bobDir.check();
  screen.render();
});

// HSD
async function start(full) {
  screen.destroy();
  console.log('ðŸ‘‹ Palm Reader...');
  const {FullNode, SPVNode} = require('hsd');
  const Node = full ? FullNode : SPVNode;

  const {
    main,
    regtest,
    homeDir,
    bobDir
  } = form.submit();

  let network, prefix, indexTX, indexAddress;
  if (main)
    network = 'main';
  if (regtest)
    network = 'regtest';
  if (homeDir)
    prefix = home;
  if (bobDir) {
    prefix = bob;
    indexTX = true;
    indexAddress = true;
  }

  const node = new Node({
    config: true,
    argv: true,
    env: true,
    logFile: true,
    logConsole: true,
    logLevel: 'debug',
    memory: false,
    workers: true,
    listen: false,
    loader: require,
    prefix,
    network,
    indexTX,
    indexAddress
  });

  const wallet = require('hsd/lib/wallet/plugin');
  node.use(wallet);

  const palmreader = require('..');
  node.use(palmreader);

  node.on('abort', async (err) => {
    const timeout = setTimeout(() => {
      console.error('Shutdown is taking a long time. Exiting.');
      process.exit(3);
    }, 5000);

    timeout.unref();

    try {
      console.error('Shutting down...');
      await node.close();
      clearTimeout(timeout);
      console.error(err.stack);
      process.exit(2);
    } catch (e) {
      console.error(`Error occurred during shutdown: ${e.message}`);
      process.exit(3);
    }
  });

  await node.ensure();
  await node.open();
  await node.connect();
  node.startSync();
};
