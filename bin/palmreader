#!/usr/bin/env node

'use strict';

Buffer.poolSize = 0;

process.title = 'palmreader';

const {FullNode} = require('hsd');

const node = new FullNode({
  config: true,
  argv: true,
  env: true,
  logFile: true,
  logConsole: true,
  logLevel: 'debug',
  memory: false,
  workers: true,
  listen: false,
  network: 'main',
  loader: require
});

const wallet = require('hsd/lib/wallet/plugin');
node.use(wallet);

const palmreader = require('..');
node.use(palmreader);

node.on('abort', async (err) => {
  const timeout = setTimeout(() => {
    console.error('Shutdown is taking a long time. Exiting.');
    process.exit(3);
  }, 5000);

  timeout.unref();

  try {
    console.error('Shutting down...');
    await node.close();
    clearTimeout(timeout);
    console.error(err.stack);
    process.exit(2);
  } catch (e) {
    console.error(`Error occurred during shutdown: ${e.message}`);
    process.exit(3);
  }
});

(async () => {
  await node.ensure();
  await node.open();
  await node.connect();
  node.startSync();
})().catch((err) => {
  console.error(err.stack);
  process.exit(1);
});
